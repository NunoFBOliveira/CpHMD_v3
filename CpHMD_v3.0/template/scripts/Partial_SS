#!/usr/bin/awk -f

# This program reads a .xpm file and writes to a given file 7 columns: 
# Time, Helix, Sheet, Turn, Bend, Coil and Control (sum of all).
#
# The options consist of the initial and final residues to address and 
# the final time of the block (.xpm) to be processed
#
# Note: The 3 kinds of DSSP helices are joined as well as the Sheet and
#        Bridge are joined in a Beta structure.
#
# Miguel Machuqueiro, ITQB-UNL, Oeiras 2006.11.13


BEGIN{
  cmd = "Partial_SS" ;
  usage = "\nUsage: "cmd" <xpm_file> begin end TOTtime <output_file>\n" \
    "begin:     initial residue\n" \
    "end:       final residue\n"  \
    "TOTtime:   Total time of simulation (ps)\n";

  if (ARGC !=6) error("Wrong number of arguments.\n" usage) ;

  input = ARGV[1] ;
  initial = ARGV[2] ;
  final = ARGV[3] ;
  Ttime = ARGV[4] ;
  output = ARGV[5] ;

# Reading table data
  while (getline < input)
  {
    if($0~/^"/ && $2=="")
    {
      n++;
      res[n]=$0;
    }
  }
  close(input);  
      
  for(k=initial; k<=final; k++)
    {
      for(t=1; t<=Ttime; t++)
	{
	  s = t + 1;
	  sec_str[k,t] = substr(res[k],s,1);
	}
    }
    

  for(t=1; t<=Ttime; t++)
    {
      Helix[t]=0;
      Beta[t]=0;
      Turn[t]=0;
      Bend[t]=0;
      Coil[t]=0;
      for(k=initial; k<=final; k++)
	{
	  if(sec_str[k,t] == "H" || sec_str[k,t] == "I" || sec_str[k,t] == "G") {
	    Helix[t]+=1;
	  }	else {
	    if(sec_str[k,t] == "E" || sec_str[k,t] == "B") {
	      Beta[t]++;
	    }	else {
	      
	      if(sec_str[k,t] == "T") {
		Turn[t]++;
	      }	else {
		if(sec_str[k,t] == "S") {
		  Bend[t]++;
	      }	else {
		Coil[t]++;
		}	
	      }
	    }
	  }
	}
      printf("%6-s " "%5s"  "%5s"  "%5s" "%5s" "%5s" "        Control -> " "%3s\n", t, Helix[t], Beta[t], Turn[t], Bend[t], Coil[t], Helix[t] + Beta[t] + Turn[t] + Bend[t] + Coil[t]) >output ;
    }
  
}


function error(msg)
{
  print cmd ": Error: " msg | "cat 1>&2" ;
  exit 1 ;
}
